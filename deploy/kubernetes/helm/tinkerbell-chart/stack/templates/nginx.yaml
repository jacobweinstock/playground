apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: tink-system
data:
  nginx.conf: |
    worker_processes 1;
    events {
        worker_connections  1024;
    }
    user root;

    http {
      server {
        listen 80;
        location / {
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          resolver kube-dns.kube-system.svc.cluster.local;
          set $boots_dns boots; # needed in Kubernetes for dynamic DNS resolution

          proxy_pass http://$boots_dns;
        }
      }

      server {
        listen 50061;
        location / {
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          resolver kube-dns.kube-system.svc.cluster.local;
          set $hegel_dns hegel; # needed in Kubernetes for dynamic DNS resolution

          proxy_pass http://$hegel_dns:50061;
        }
      }

      server {
        listen 42113 http2;
        location / {
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          resolver kube-dns.kube-system.svc.cluster.local;
          set $tink_dns tink-server; # needed in Kubernetes for dynamic DNS resolution

          grpc_pass grpc://$tink_dns:42113;
        }
      }
    }

    stream {
      log_format logger-json escape=json '{"source": "nginx", "time": $msec, "address": "$remote_addr", "status": $status, "upstream_addr": "$upstream_addr"}';

      server {
          listen 67 udp;
          resolver kube-dns.kube-system.svc.cluster.local;
          set $boots_dns boots; # needed in Kubernetes for dynamic DNS resolution
          proxy_pass $boots_dns:67;
          proxy_bind $remote_addr:$remote_port transparent;
          proxy_responses 0;
          access_log /dev/stdout logger-json;
      }
      server {
          listen 69 udp;
          resolver kube-dns.kube-system.svc.cluster.local;
          set $boots_dns boots; # needed in Kubernetes for dynamic DNS resolution
          proxy_pass $boots_dns:69;
          proxy_timeout 1s;
          access_log /dev/stdout logger-json;
      }
      server {
          listen 514 udp;
          resolver kube-dns.kube-system.svc.cluster.local;
          set $boots_dns boots; # needed in Kubernetes for dynamic DNS resolution
          proxy_pass $boots_dns:514;
          proxy_bind $remote_addr:$remote_port transparent;
          proxy_responses 0;
          access_log /dev/stdout logger-json;
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tink-stack
  namespace: tink-system
spec:
  selector:
    matchLabels:
      app: stack
      lbtype: external
  replicas: 1
  template:
    metadata:
      labels:
        app: stack
        lbtype: external
    spec:
      containers:
      - name: nginx
        image: nginx:1.23.1
        ports:
        - containerPort: 80
          name: boots-http
          protocol: TCP
        - containerPort: 50061
          name: hegel-http
        - containerPort: 42113
          protocol: TCP
          name: tink-grpc
        - containerPort: 67
          name: boots-dhcp
          protocol: UDP
        - containerPort: 69
          name: boots-tftp
          protocol: UDP
        - containerPort: 514
          name: boots-syslog
          protocol: UDP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts:
        - mountPath: /etc/nginx
          readOnly: true
          name: nginx-conf
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: nginx.conf
              path: nginx.conf


